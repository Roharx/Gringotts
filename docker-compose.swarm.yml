version: "3.8"

services:
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U gringotts"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:15672/api/overview"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    image: roharx/gringotts-migration:latest
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
    depends_on:
      - db
    command:
      - "/bin/sh"
      - "-c"
      - |
        ./wait-for-it.sh db:5432 -- echo 'DB is ready' \
        && dotnet Gringotts.Migration.dll

  transactionpublisher:
    image: roharx/gringotts-transactionpublisher:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      - rabbitmq
    ports:
      - "5003:8080"

  transactionconsumer:
    image: roharx/gringotts-transactionconsumer:latest
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      - db
      - rabbitmq
    ports:
      - "5004:8080"

  currencyservice:
    image: roharx/gringotts-currencyservice:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
    depends_on:
      - db
    ports:
      - "5001:8080"

  ledgerservice:
    image: roharx/gringotts-ledgerservice:latest
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
    depends_on:
      - db
    ports:
      - "5002:8080"

  apigateway:
    image: roharx/gringotts-apigateway:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER=gringotts
      - POSTGRES_PASSWORD=gringotts
      - POSTGRES_DB=gringotts
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - Jwt__Issuer=GringottsAPI
      - Jwt__Audience=GringottsFrontend
      - Jwt__Key=lyowRyNSr9p2iS1r4aU2bslYFCu/Udu/cfrX7SRa3ps=
    depends_on:
      - currencyservice
      - ledgerservice
      - transactionpublisher
      - transactionconsumer
    ports:
      - "5000:8080"

  frontend:
    image: roharx/gringotts-frontend:latest
    ports:
      - "8100:80"
    depends_on:
      - apigateway

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - transactionpublisher
      - ledgerservice
      - apigateway
      - transactionconsumer
      - currencyservice

  jaeger:
    image: jaegertracing/all-in-one:1.49.0
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=yourpassword
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
    depends_on:
      - prometheus
      - jaeger

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
    command: --interval 300

volumes:
  pgdata:
