version: "3.8"
services:
  db:
    image: postgres:14-alpine
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672/api/overview"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: src/Gringotts.Migration/Dockerfile
    env_file:
      - .env
    environment:
      - CONNECTION_STRING=Host=${DB_HOST};Port=${DB_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
    depends_on:
      - db
    command: [ "/bin/sh", "-c", "./wait-for-it.sh db:5432 -- echo 'DB is ready' && dotnet Gringotts.Migration.dll" ]
  
  
  transactionpublisher:
    build:
      context: .
      dockerfile: src/Gringotts.TransactionPublisher/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    depends_on:
      - rabbitmq
    ports:
      - "5003:8080"

  transactionconsumer:
    build:
      context: .
      dockerfile: src/Gringotts.TransactionConsumer/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
      - rabbitmq
    ports:
      - "5004:8080"

  currencyservice:
    build:
      context: .
      dockerfile: src/Gringotts.CurrencyService/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - db
    ports:
      - "5001:8080"

  ledgerservice:
    build:
      context: .
      dockerfile: src/Gringotts.LedgerService/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    ports:
      - "5002:8080"

  apigateway:
    build:
      context: .
      dockerfile: src/Gringotts.ApiGateway/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - currencyservice
      - ledgerservice
      - transactionpublisher
      - transactionconsumer
    ports:
      - "5000:8080"

  # Monitoring components

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro    
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - transactionpublisher
      - ledgerservice
      - apigateway
      - transactionconsumer
      - currencyservice
  
  jaeger:
    image: jaegertracing/all-in-one:1.49.0
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
        
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=yourpassword
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
    depends_on:
      - prometheus
      - jaeger

volumes:
  pgdata:
